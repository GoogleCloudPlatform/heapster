// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	MetricValue
	MetricPoint
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricValue struct {
	IntValue   int64   `protobuf:"varint,1,opt,name=IntValue" json:"IntValue,omitempty"`
	FloatValue float32 `protobuf:"fixed32,2,opt,name=FloatValue" json:"FloatValue,omitempty"`
	MetricType string  `protobuf:"bytes,3,opt,name=MetricType" json:"MetricType,omitempty"`
	ValueType  string  `protobuf:"bytes,4,opt,name=ValueType" json:"ValueType,omitempty"`
}

func (m *MetricValue) Reset()                    { *m = MetricValue{} }
func (m *MetricValue) String() string            { return proto1.CompactTextString(m) }
func (*MetricValue) ProtoMessage()               {}
func (*MetricValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetricValue) GetIntValue() int64 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *MetricValue) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *MetricValue) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *MetricValue) GetValueType() string {
	if m != nil {
		return m.ValueType
	}
	return ""
}

type MetricPoint struct {
	Name      string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value     *MetricValue               `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Tags      map[string]string          `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetricPoint) Reset()                    { *m = MetricPoint{} }
func (m *MetricPoint) String() string            { return proto1.CompactTextString(m) }
func (*MetricPoint) ProtoMessage()               {}
func (*MetricPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MetricPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricPoint) GetValue() *MetricValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MetricPoint) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MetricPoint) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*MetricValue)(nil), "proto.MetricValue")
	proto1.RegisterType((*MetricPoint)(nil), "proto.MetricPoint")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricPlugin service

type MetricPluginClient interface {
	WriteMetricsPoint(ctx context.Context, in *MetricPoint, opts ...grpc.CallOption) (*Empty, error)
}

type metricPluginClient struct {
	cc *grpc.ClientConn
}

func NewMetricPluginClient(cc *grpc.ClientConn) MetricPluginClient {
	return &metricPluginClient{cc}
}

func (c *metricPluginClient) WriteMetricsPoint(ctx context.Context, in *MetricPoint, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.MetricPlugin/WriteMetricsPoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricPlugin service

type MetricPluginServer interface {
	WriteMetricsPoint(context.Context, *MetricPoint) (*Empty, error)
}

func RegisterMetricPluginServer(s *grpc.Server, srv MetricPluginServer) {
	s.RegisterService(&_MetricPlugin_serviceDesc, srv)
}

func _MetricPlugin_WriteMetricsPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricPluginServer).WriteMetricsPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricPlugin/WriteMetricsPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricPluginServer).WriteMetricsPoint(ctx, req.(*MetricPoint))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricPlugin",
	HandlerType: (*MetricPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteMetricsPoint",
			Handler:    _MetricPlugin_WriteMetricsPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

func init() { proto1.RegisterFile("metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x49, 0x93, 0xfe, 0xff, 0xee, 0xa4, 0x82, 0x0e, 0x1e, 0x4a, 0x28, 0x1a, 0x7a, 0xca,
	0x69, 0x2b, 0x11, 0xb1, 0x78, 0xaf, 0xe0, 0x41, 0x90, 0xa5, 0xe8, 0x79, 0x2b, 0x6b, 0x08, 0x26,
	0xd9, 0x90, 0x6c, 0x84, 0x3c, 0x81, 0xaf, 0xeb, 0x23, 0x48, 0x67, 0xb7, 0x69, 0xc4, 0x53, 0x66,
	0xbe, 0xef, 0xcb, 0xce, 0x6f, 0x06, 0x4e, 0x4b, 0x65, 0x9a, 0xfc, 0xad, 0xe5, 0x75, 0xa3, 0x8d,
	0xc6, 0x29, 0x7d, 0xa2, 0xab, 0x4c, 0xeb, 0xac, 0x50, 0x2b, 0xea, 0x76, 0xdd, 0xfb, 0xca, 0xe4,
	0xa5, 0x6a, 0x8d, 0x2c, 0x6b, 0x9b, 0x5b, 0x7e, 0x79, 0x10, 0x3e, 0xd1, 0x9f, 0x2f, 0xb2, 0xe8,
	0x14, 0x46, 0x70, 0xf2, 0x58, 0x19, 0xaa, 0xe7, 0x5e, 0xec, 0x25, 0xbe, 0x18, 0x7a, 0xbc, 0x04,
	0x78, 0x28, 0xb4, 0x74, 0xee, 0x24, 0xf6, 0x92, 0x89, 0x18, 0x29, 0x7b, 0xdf, 0x3e, 0xb5, 0xed,
	0x6b, 0x35, 0xf7, 0x63, 0x2f, 0x61, 0x62, 0xa4, 0xe0, 0x02, 0x18, 0x05, 0xc9, 0x0e, 0xc8, 0x3e,
	0x0a, 0xcb, 0xef, 0x81, 0xe4, 0x59, 0xe7, 0x95, 0x41, 0x84, 0xa0, 0x92, 0xa5, 0xa5, 0x60, 0x82,
	0x6a, 0x4c, 0x60, 0xfa, 0x39, 0x0c, 0x0f, 0x53, 0xb4, 0x4b, 0xf0, 0xd1, 0x02, 0xc2, 0x06, 0x70,
	0x0d, 0x6c, 0x58, 0x95, 0x50, 0xc2, 0x34, 0xe2, 0xf6, 0x18, 0xfc, 0x70, 0x0c, 0xbe, 0x3d, 0x24,
	0xc4, 0x31, 0x8c, 0xd7, 0x10, 0x18, 0x99, 0xb5, 0xf3, 0x20, 0xf6, 0x93, 0x30, 0x5d, 0xfc, 0x1a,
	0x41, 0x64, 0x7c, 0x2b, 0xb3, 0x76, 0x53, 0x99, 0xa6, 0x17, 0x94, 0x8c, 0xee, 0x80, 0x0d, 0x12,
	0x9e, 0x81, 0xff, 0xa1, 0x7a, 0x47, 0xbd, 0x2f, 0xf1, 0x62, 0x0c, 0xcd, 0x1c, 0xe0, 0xfd, 0x64,
	0xed, 0x2d, 0xff, 0xc3, 0x74, 0x53, 0xd6, 0xa6, 0x4f, 0x37, 0x30, 0x73, 0x03, 0x8a, 0x2e, 0xcb,
	0x2b, 0xbc, 0x85, 0xf3, 0xd7, 0x26, 0x37, 0xca, 0x8a, 0xad, 0x3b, 0xc8, 0x5f, 0x94, 0x68, 0xe6,
	0x34, 0x7a, 0x66, 0xf7, 0x8f, 0x9a, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x80, 0xc6,
	0xbd, 0x0c, 0x02, 0x00, 0x00,
}
